name: Test Doc Generator

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'The branch in appsmith-docs to checkout and create PR against'
        required: true
        default: 'docs-staging'
        type: string

jobs:
  generate_docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout appsmith-docs target branch
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.test_REPO_ACCESS_TOKEN }}
        ref: ${{ github.event.inputs.target_branch }}
        fetch-depth: 0

    - name: Ensure scripts directory and tracking files exist
      run: |
        mkdir -p scripts
        [ -f scripts/processed_files.txt ] || touch scripts/processed_files.txt
        [ -f scripts/file_hashes.json ] || echo "{}" > scripts/file_hashes.json

    - name: Fetch file list from test repo
      id: fetch_files
      run: |
        echo "Fetching files from source repo..."
        curl -s --max-time 60 -H "Authorization: Bearer ${{ secrets.test_REPO_ACCESS_TOKEN }}" \
             -H "Accept: application/vnd.github+json" \
             https://api.github.com/repos/harshilp24/integration-resources-test/contents/Generic%20UQI%20Creation/uqi_configs \
             -o response.json

        if ! jq -e '.' response.json > /dev/null; then
          echo "Error: Invalid JSON received from GitHub API."
          cat response.json
          exit 1
        fi

        if jq -e 'type == "array"' response.json > /dev/null; then
          jq -r '.[] | select(.type=="file") | [.name, .sha] | @tsv' response.json > latest_files_with_sha.txt
          jq -r '.[] | select(.type=="file") | .name' response.json > latest_files.txt
          echo "files_found=true" >> $GITHUB_ENV
        else
          echo "Warning: Non-array response from GitHub API."
          touch latest_files_with_sha.txt
          touch latest_files.txt
          echo "files_found=false" >> $GITHUB_ENV
        fi

    - name: Identify new and modified files
      id: detect_changes
      if: env.files_found == 'true'
      run: |
        PREV_HASHES=$(cat scripts/file_hashes.json)
        [ -f scripts/processed_files.txt ] || touch scripts/processed_files.txt

        comm -23 <(sort latest_files.txt) <(sort scripts/processed_files.txt) > new_files.tmp || true
        MODIFIED_FILES_LIST="modified_files.tmp"
        touch $MODIFIED_FILES_LIST

        while IFS=$'\t' read -r FILE_NAME FILE_SHA; do
          if grep -q -x -F "$FILE_NAME" scripts/processed_files.txt; then
            PREV_SHA=$(echo "$PREV_HASHES" | jq -r --arg file "$FILE_NAME" '.[$file] // ""')
            if [ -n "$PREV_SHA" ] && [ "$PREV_SHA" != "$FILE_SHA" ]; then
              echo "$FILE_NAME" >> $MODIFIED_FILES_LIST
            fi
          fi
        done < latest_files_with_sha.txt

        cat new_files.tmp $MODIFIED_FILES_LIST | sort | uniq | grep -v '^$' > files_to_process.txt || true

        if [ -s files_to_process.txt ]; then
          echo "changes_found=true" >> $GITHUB_ENV
        else
          echo "changes_found=false" >> $GITHUB_ENV
        fi
        rm -f new_files.tmp modified_files.tmp

    - name: Exit if no files to process
      if: env.changes_found != 'true'
      run: |
        echo "No changes detected. Exiting."
        exit 0

    - name: Process files with OpenAI
      if: env.changes_found == 'true'
      run: |
        mkdir -p generated_docs
        HASHES_JSON=$(cat scripts/file_hashes.json)
        PROCESSED_COUNT=0

        while IFS= read -r FILE_NAME; do
          [ -z "$FILE_NAME" ] && continue
          echo "⏳ Processing $FILE_NAME"

          ENCODED_FILE_NAME=$(printf '%s' "$FILE_NAME" | jq -sRr @uri)
          FILE_URL="https://raw.githubusercontent.com/harshilp24/integration-resources-test/main/Generic%20UQI%20Creation/uqi_configs/$ENCODED_FILE_NAME"
          curl -fsSL --max-time 60 "$FILE_URL" -o input_file.json || { echo "Download failed for $FILE_NAME"; continue; }

          # Safe SHA lookup
          if [ -s latest_files_with_sha.txt ]; then
            echo "--- latest_files_with_sha.txt ---"
            cat -v latest_files_with_sha.txt
            echo "-------------------------------"
          fi

          FILE_SHA=$(awk -F'\t' -v filename="$FILE_NAME" '$1 == filename { print $2; exit }' latest_files_with_sha.txt 2>/dev/null || echo "")

          if [ -z "$FILE_SHA" ]; then
            echo "Warning: Could not find SHA for $FILE_NAME"
          else
            echo "Updating hash for $FILE_NAME to $FILE_SHA"
            HASHES_JSON=$(echo "$HASHES_JSON" | jq --arg file "$FILE_NAME" --arg sha "$FILE_SHA" '.[$file] = $sha')
          fi

          SYSTEM_PROMPT=$(cat .github/prompts/extract_prompt.txt || echo "Extract important integration details.")
          USER_CONTENT=$(cat input_file.json)

          PAYLOAD=$(jq -n \
            --arg system "$SYSTEM_PROMPT" \
            --arg user "$USER_CONTENT" \
            '{
              model: "gpt-4-1106-preview",
              messages: [
                {"role": "system", "content": $system},
                {"role": "user", "content": $user}
              ],
              max_tokens: 2000,
              temperature: 0
            }')

          RESPONSE1=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")

          if echo "$RESPONSE1" | jq -e '.error' > /dev/null; then
            echo "Error from OpenAI Prompt 1"
            echo "$RESPONSE1" | jq '.'
            continue
          fi
          echo "$RESPONSE1" | jq -r '.choices[0].message.content' > extracted_info.md

          SYSTEM_PROMPT=$(cat .github/prompts/generate_prompt.txt || echo "Generate reference documentation in markdown.")
          EXTRACTED_CONTENT=$(cat extracted_info.md)

          PAYLOAD=$(jq -n \
            --arg system "$SYSTEM_PROMPT" \
            --arg user "$EXTRACTED_CONTENT" \
            '{
              model: "gpt-4-1106-preview",
              messages: [
                {"role": "system", "content": $system},
                {"role": "user", "content": $user}
              ],
              max_tokens: 4000,
              temperature: 0.3
            }')

          RESPONSE2=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")

          if echo "$RESPONSE2" | jq -e '.error' > /dev/null; then
            echo "Error from OpenAI Prompt 2"
            echo "$RESPONSE2" | jq '.'
            continue
          fi
          echo "$RESPONSE2" | jq -r '.choices[0].message.content' > generated_doc.md

          INTEGRATION=$(echo "$FILE_NAME" | sed 's/_uqi_config\.json//' | tr '[:upper:]' '[:lower:]')
          FINAL_PATH="website/docs/connect-data/reference/${INTEGRATION}.md"

          mkdir -p "$(dirname "$FINAL_PATH")"
          cp generated_doc.md "$FINAL_PATH"

          echo "$FILE_NAME" >> processed_files_this_run.txt
          PROCESSED_COUNT=$((PROCESSED_COUNT + 1))
          echo "✅ Finished $F
