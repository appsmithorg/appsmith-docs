name: Integration Doc Generator

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch in appsmith-docs to create PR against'
        required: true
        default: 'main'
        type: string

jobs:
  generate_docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout appsmith-docs (target branch)
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        ref: ${{ github.event.inputs.target_branch }}
        fetch-depth: 0

    - name: Checkout integration-resources repo
      uses: actions/checkout@v4
      with:
        repository: appsmithorg/integration-resources
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        ref: main
        path: integration-resources
        fetch-depth: 20

    - name: Detect new JSON files to process
      run: |
        mkdir -p scripts
        touch scripts/processed_files.txt

        echo "🔍 Detecting latest committed JSON files..."
        cd integration-resources

        git log --pretty=format: --name-only -n 20 \
          | grep 'Generic UQI Creation/uqi_configs/.*_uqi_config.json' \
          | sort -u \
          | head -n 10 \
          > ../scripts/candidate_files.txt

        cd ..
        echo "📄 Candidate files:"
        cat scripts/candidate_files.txt || echo "(none)"

        # Filter out already processed
        grep -Fxv -f scripts/processed_files.txt scripts/candidate_files.txt > files_to_process.txt || true

        echo "📄 Files to be processed:"
        cat files_to_process.txt || echo "(none)"

        if [ ! -s files_to_process.txt ]; then
          echo "🛑 No new files to process."
          exit 0
        fi

        echo "changes_found=true" >> $GITHUB_ENV

    - name: Process files with OpenAI
      if: env.changes_found == 'true'
      run: |
        mkdir -p generated_docs
        PROCESSED_COUNT=0

        while IFS= read -r FILE_PATH; do
          FILE_NAME=$(basename "$FILE_PATH")
          echo "⏳ Processing: $FILE_NAME"

          FILE_URL="https://raw.githubusercontent.com/appsmithorg/integration-resources/main/Generic%20UQI%20Creation/uqi_configs/$FILE_NAME"
          echo "🌐 Fetching: $FILE_URL"
          curl -fsSL --max-time 60 "$FILE_URL" -o input_file.json || {
            echo "❌ Failed to fetch $FILE_NAME"
            continue
          }

          echo "📦 Raw JSON:"
          cat input_file.json | head -n 20 || true

          SYSTEM_PROMPT=$(cat .github/prompts/extract_prompt.txt || echo "Extract important integration details.")
          USER_CONTENT=$(cat input_file.json)

          echo "🧠 Sending to OpenAI - Prompt 1"
          echo "System prompt: $SYSTEM_PROMPT"

          PAYLOAD1=$(jq -n \
            --arg system "$SYSTEM_PROMPT" \
            --arg user "$USER_CONTENT" \
            '{
              model: "gpt-4-1106-preview",
              messages: [
                {"role": "system", "content": $system},
                {"role": "user", "content": $user}
              ],
              max_tokens: 2000,
              temperature: 0
            }')

          echo "$PAYLOAD1" > debug_payload_1.json

          RESPONSE1=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD1")

          echo "$RESPONSE1" | jq .

          if echo "$RESPONSE1" | jq -e '.error' > /dev/null; then
            echo "❌ OpenAI error on Prompt 1"
            echo "$RESPONSE1" | jq .
            continue
          fi
          echo "$RESPONSE1" | jq -r '.choices[0].message.content' > extracted_info.md

          SYSTEM_PROMPT=$(cat .github/prompts/generate_prompt.txt || echo "Generate reference documentation in markdown.")
          EXTRACTED_CONTENT=$(cat extracted_info.md)

          echo "🧠 Sending to OpenAI - Prompt 2"
          echo "System prompt: $SYSTEM_PROMPT"

          PAYLOAD2=$(jq -n \
            --arg system "$SYSTEM_PROMPT" \
            --arg user "$EXTRACTED_CONTENT" \
            '{
              model: "gpt-4-1106-preview",
              messages: [
                {"role": "system", "content": $system},
                {"role": "user", "content": $user}
              ],
              max_tokens: 4000,
              temperature: 0.3
            }')

          echo "$PAYLOAD2" > debug_payload_2.json

          RESPONSE2=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD2")

          echo "$RESPONSE2" | jq .

          if echo "$RESPONSE2" | jq -e '.error' > /dev/null; then
            echo "❌ OpenAI error on Prompt 2"
            echo "$RESPONSE2" | jq .
            continue
          fi
          echo "$RESPONSE2" | jq -r '.choices[0].message.content' > generated_doc.md
          echo "📄 Generated Markdown:"
          cat generated_doc.md

          INTEGRATION=$(echo "$FILE_NAME" | sed 's/_uqi_config\.json//' | tr '[:upper:]' '[:lower:]')
          FINAL_PATH="website/docs/connect-data/reference/${INTEGRATION}.md"

          mkdir -p "$(dirname "$FINAL_PATH")"
          cp generated_doc.md "$FINAL_PATH"

          echo "$FILE_PATH" >> scripts/processed_files.txt
          PROCESSED_COUNT=$((PROCESSED_COUNT + 1))
          echo "✅ Finished $FILE_NAME"

        done < files_to_process.txt

        echo "processed_count=$PROCESSED_COUNT" >> $GITHUB_ENV
        if [ "$PROCESSED_COUNT" -gt 0 ]; then
          echo "content_generated=true" >> $GITHUB_ENV
        else
          echo "content_generated=false" >> $GITHUB_ENV
        fi

    - name: Commit and open PR
      if: env.content_generated == 'true'
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        title: "docs: update integration docs for ${{ github.event.inputs.target_branch }}"
        commit-message: "docs: auto-generated markdown for ${{ github.event.inputs.target_branch }}"
        branch: "docs-update/${{ github.event.inputs.target_branch }}-${{ github.run_id }}"
        base: ${{ github.event.inputs.target_branch }}
        add-paths: |
          website/docs/connect-data/reference/
          scripts/processed_files.txt
        body: |
          ✅ Auto-generated documentation PR.

          This PR includes:
          - Docs for newly committed integration configs.
          - Skips already processed files using `scripts/processed_files.txt`

