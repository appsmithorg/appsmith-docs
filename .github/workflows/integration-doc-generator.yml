name: Integration Doc Generator

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch in appsmith-docs to create PR against'
        required: true
        default: 'main'
        type: string

jobs:
  generate_docs:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the docs repository (full history to pull processed_files.txt)
      - name: Checkout appsmith-docs (target branch)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          ref: ${{ github.event.inputs.target_branch }}
          fetch-depth: 0

      # 2. Checkout the integration-resources repository
      - name: Checkout integration-resources
        uses: actions/checkout@v4
        with:
          repository: appsmithorg/integration-resources
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          ref: main
          path: integration-resources
          fetch-depth: 2

      # 3. Ensure processed_files.txt exists
      - name: Ensure processed_files.txt
        run: |
          mkdir -p scripts
          if [ ! -f scripts/processed_files.txt ]; then
            echo "# processed UQI config files" > scripts/processed_files.txt
          fi

      # 4. Detect changed files in the uqi_configs directory
      - name: Get changed UQI config filenames
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          path: integration-resources/Generic UQI Creation/uqi_configs
          since_last_remote_commit: true

      # 5. Filter out already processed files
      - name: Prepare list of files to process
        run: |
          echo "${{ steps.changed-files.outputs.all_changed_files }}" \
            | tr ' ' '\n' \
            | grep -v '^$' \
            > scripts/candidate_files.txt

          grep -Fxv -f scripts/processed_files.txt scripts/candidate_files.txt \
            > scripts/files_to_process.txt || true

          echo "Files to process:"
          cat scripts/files_to_process.txt || echo "(none)"

          if [ ! -s scripts/files_to_process.txt ]; then
            echo "No new files to process. Exiting."
            exit 0
          fi

          echo "changes_found=true" >> $GITHUB_ENV

      # 6. Process each new file with OpenAI
      - name: Generate docs via OpenAI
        if: env.changes_found == 'true'
        run: |
          mkdir -p website/docs/connect-data/reference
          PROCESSED=0

          while IFS= read -r FILE_NAME; do
            echo "⏳ Processing $FILE_NAME"

            RAW_URL="https://raw.githubusercontent.com/appsmithorg/integration-resources/main/Generic%20UQI%20Creation/uqi_configs/$FILE_NAME"
            echo "Fetching $RAW_URL"
            curl -fsSL --max-time 60 "$RAW_URL" -o input.json || {
              echo "❌ Failed to fetch $FILE_NAME"
              continue
            }

            # Step 1: extract integration details
            SYSTEM1=$(< .github/prompts/extract_prompt.txt)
            USER1=$(< input.json)
            PAYLOAD1=$(jq -nc \
              --arg sys "$SYSTEM1" \
              --arg usr "$USER1" \
              '{model:"gpt-4-1106-preview", messages:[{role:"system",content:$sys},{role:"user",content:$usr}], max_tokens:2000, temperature:0}')
            RESP1=$(curl -s -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
                         -H "Content-Type: application/json" \
                         -d "$PAYLOAD1" \
                         https://api.openai.com/v1/chat/completions)
            if echo "$RESP1" | jq -e '.error' > /dev/null; then
              echo "❌ OpenAI extract error for $FILE_NAME"
              echo "$RESP1" | jq .
              continue
            fi
            EXTRACTED=$(echo "$RESP1" | jq -r '.choices[0].message.content')

            # Step 2: generate markdown
            SYSTEM2=$(< .github/prompts/generate_prompt.txt)
            PAYLOAD2=$(jq -nc \
              --arg sys "$SYSTEM2" \
              --arg usr "$EXTRACTED" \
              '{model:"gpt-4-1106-preview", messages:[{role:"system",content:$sys},{role:"user",content:$usr}], max_tokens:4000, temperature:0.3}')
            RESP2=$(curl -s -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
                         -H "Content-Type: application/json" \
                         -d "$PAYLOAD2" \
                         https://api.openai.com/v1/chat/completions)
            if echo "$RESP2" | jq -e '.error' > /dev/null; then
              echo "❌ OpenAI generate error for $FILE_NAME"
              echo "$RESP2" | jq .
              continue
            fi
            MD=$(echo "$RESP2" | jq -r '.choices[0].message.content')

            NAME=$(echo "$FILE_NAME" | sed 's/_uqi_config\.json//' | tr '[:upper:]' '[:lower:]')
            OUT="website/docs/connect-data/reference/${NAME}.md"
            echo "$MD" > "$OUT"
            echo "✅ Wrote $OUT"

            echo "$FILE_NAME" >> scripts/processed_files.txt
            PROCESSED=$((PROCESSED+1))
          done < scripts/files_to_process.txt

          echo "processed_count=$PROCESSED" >> $GITHUB_ENV
          if [ "$PROCESSED" -gt 0 ]; then
            echo "content_generated=true" >> $GITHUB_ENV
          else
            echo "content_generated=false" >> $GITHUB_ENV
            exit 1
          fi

      # 7. Commit and open PR
      - name: Commit & open Pull Request
        if: env.content_generated == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          title: "docs: update integration docs for ${{ github.event.inputs.target_branch }}"
          commit-message: |
            docs: automated generation for ${{ github.event.inputs.target_branch }}

            Processed files:
            ${{ steps.changed-files.outputs.all_changed_files }}
          branch: "docs-update/${{ github.event.inputs.target_branch }}-${{ github.run_id }}"
          base: ${{ github.event.inputs.target_branch }}
          add-paths: |
            website/docs/connect-data/reference/
            scripts/processed_files.txt
          body: |
            ✅ Auto-generated documentation update.

            **Target Branch:** `${{ github.event.inputs.target_branch }}`
            **Processed Files:**  
            ${{ steps.changed-files.outputs.all_changed_files }}
