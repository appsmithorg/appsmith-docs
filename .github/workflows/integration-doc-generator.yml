name: Integration Doc Generator

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_check_all:
        description: 'Force check all files (not just new ones)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  
  # Event-based trigger - when changes are pushed to the integration-resources repo
  repository_dispatch:
    types: [integration_resources_updated]

jobs:
  generate_docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout appsmith-docs
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}  # Use a PAT with access to both repos
        fetch-depth: 0  # Fetch all history to check last commit

    - name: Ensure scripts directory exists
      run: |
        mkdir -p scripts
        if [ ! -f scripts/processed_files.txt ]; then
          touch scripts/processed_files.txt
        fi
        if [ ! -f scripts/last_commit_sha.txt ]; then
          touch scripts/last_commit_sha.txt
        fi

    - name: Get last processed commit
      id: last_commit
      run: |
        if [ -s scripts/last_commit_sha.txt ]; then
          LAST_COMMIT=$(cat scripts/last_commit_sha.txt)
          echo "last_commit=$LAST_COMMIT" >> $GITHUB_ENV
          echo "Last processed commit: $LAST_COMMIT"
        else
          echo "No previous commit found, will process all files"
          echo "last_commit=" >> $GITHUB_ENV
        fi

    - name: Fetch file list and metadata from integration-resources
      run: |
        # Get the latest commit SHA from integration-resources repo
        LATEST_COMMIT=$(curl -s -H "Authorization: Bearer ${{ secrets.REPO_ACCESS_TOKEN }}" \
                        -H "Accept: application/vnd.github+json" \
                        https://api.github.com/repos/appsmithorg/integration-resources/commits/main | \
                        jq -r '.sha' )
        
        echo "Latest commit in integration-resources: $LATEST_COMMIT"
        echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_ENV
        
        # Get all files in the repo
        curl -s -H "Authorization: Bearer ${{ secrets.REPO_ACCESS_TOKEN }}" \
             -H "Accept: application/vnd.github+json" \
             https://api.github.com/repos/appsmithorg/integration-resources/contents/Generic%20UQI%20Creation/uqi_configs \
             -o response.json

        # Validate it's an array (not an error message )
        if ! jq 'type == "array"' response.json | grep -q true; then
          echo "‚ùå GitHub API did not return a file list. Possible error:"
          cat response.json
          exit 1
        fi

        # Extract file names
        jq -r '.[] | select(.type=="file") | .name' response.json > latest_files.txt

    - name: Identify changed files since last commit
      id: detect_changes
      run: |
        # Force check all files if requested
        if [ "${{ github.event.inputs.force_check_all }}" == "true" ]; then
          echo "üîÑ Force checking all files as requested"
          cat latest_files.txt > files_to_process.txt
          echo "files_found=true" >> $GITHUB_ENV
        elif [ -z "${{ env.last_commit }}" ]; then
          # No previous commit, process all files
          cat latest_files.txt > files_to_process.txt
          echo "files_found=true" >> $GITHUB_ENV
        else
          # Get files changed since last commit
          echo "üîç Finding files changed since commit ${{ env.last_commit }}"
          
          # Get list of files changed between commits
          CHANGED_FILES=$(curl -s -H "Authorization: Bearer ${{ secrets.REPO_ACCESS_TOKEN }}" \
                         -H "Accept: application/vnd.github+json" \
                         "https://api.github.com/repos/appsmithorg/integration-resources/compare/${{ env.last_commit }}...${{ env.latest_commit }}" | \
                         jq -r '.files[] | select(.filename | startswith("Generic UQI Creation/uqi_configs/" )) | .filename | split("/") | last' | \
                         grep -v "^$")
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "$CHANGED_FILES" > files_to_process.txt
            echo "üÜï Found files changed since last commit:"
            cat files_to_process.txt
            echo "files_found=true" >> $GITHUB_ENV
          else
            echo "‚úÖ No files changed since last commit."
            echo "files_found=false" >> $GITHUB_ENV
          fi
        fi
        
        # Check for existing documentation
        if [ "${{ env.files_found }}" == "true" ]; then
          echo "üîç Checking for existing documentation..."
          FILTERED_FILES=""
          while IFS= read -r FILE_NAME; do
            INTEGRATION=$(echo "$FILE_NAME" | sed 's/_uqi_config\.json//' | tr '[:upper:]' '[:lower:]')
            DOC_PATH="website/docs/connect-data/reference/${INTEGRATION}.md"
            
            if [ -f "$DOC_PATH" ]; then
              echo "üîÑ Documentation exists for $INTEGRATION, will update"
            fi
            
            FILTERED_FILES="${FILTERED_FILES}${FILE_NAME}"$'\n'
          done < files_to_process.txt
          
          echo "$FILTERED_FILES" | grep -v "^$" > files_to_process.txt
        fi
        
        # Count files to process
        FILE_COUNT=$(wc -l < files_to_process.txt || echo "0")
        echo "file_count=$FILE_COUNT" >> $GITHUB_ENV

    - name: Exit if no files to process
      if: env.files_found != 'true' || env.file_count == '0'
      run: |
        echo "No files to process. Exiting."
        exit 0

    - name: Process files
      run: |
        # Create a directory for generated docs
        mkdir -p generated_docs
        
        # Process each file
        while IFS= read -r FILE_NAME; do
          echo "‚è≥ Processing: $FILE_NAME"
          
          # Download the file
          FILE_URL="https://raw.githubusercontent.com/appsmithorg/integration-resources/main/Generic%20UQI%20Creation/uqi_configs/$FILE_NAME"
          curl -sSL "$FILE_URL" -o "input_file.json"
          
          # Process with OpenAI API (using completion API, not chat )
          echo "üß† Extracting information with OpenAI API..."
          
          # Extract information using OpenAI API
          SYSTEM_PROMPT=$(cat .github/prompts/extract_prompt.txt || echo "Extract the key information from this integration configuration file.")
          USER_CONTENT=$(cat input_file.json)
          
          # Use OpenAI Completion API (not Chat API)
          PAYLOAD=$(jq -n --arg prompt "System: $SYSTEM_PROMPT\n\nUser: $USER_CONTENT" '{
            model: "gpt-4-turbo-preview",
            prompt: $prompt,
            max_tokens: 2000,
            temperature: 0
          }')
          
          curl -s https://api.openai.com/v1/completions \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" | jq -r '.choices[0].text' > "extracted_info.md"
          
          # Generate documentation
          echo "üìù Generating documentation..."
          
          SYSTEM_PROMPT=$(cat .github/prompts/generate_prompt.txt || echo "Generate comprehensive markdown documentation based on the extracted information." )
          EXTRACTED_CONTENT=$(cat extracted_info.md)
          
          # Use OpenAI Completion API again
          PAYLOAD=$(jq -n --arg prompt "System: $SYSTEM_PROMPT\n\nUser: $EXTRACTED_CONTENT" '{
            model: "gpt-4-turbo-preview",
            prompt: $prompt,
            max_tokens: 4000,
            temperature: 0.3
          }')
          
          curl -s https://api.openai.com/v1/completions \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" | jq -r '.choices[0].text' > "generated_doc.md"
          
          # Prepare final path
          INTEGRATION=$(echo "$FILE_NAME" | sed 's/_uqi_config\.json//' | tr '[:upper:]' '[:lower:]' )
          FINAL_PATH="website/docs/connect-data/reference/${INTEGRATION}.md"
          mkdir -p "$(dirname "$FINAL_PATH")"
          
          # Copy to final location
          cp "generated_doc.md" "$FINAL_PATH"
          
          # Also save to our generated_docs directory for the PR
          cp "generated_doc.md" "generated_docs/${INTEGRATION}.md"
          
          # Mark as processed if it's a new file
          if ! grep -q "^$FILE_NAME$" scripts/processed_files.txt; then
            echo "$FILE_NAME" >> scripts/processed_files.txt
          fi
          
          echo "‚úÖ Completed processing: $FILE_NAME"
        done < files_to_process.txt
        
        # Save the latest commit SHA for next run
        echo "${{ env.latest_commit }}" > scripts/last_commit_sha.txt

    - name: Commit and open PR
      if: env.files_found == 'true' && env.file_count != '0'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        title: "docs: add/update integration references"
        commit-message: "docs: add/update integration references"
        branch: "auto/docs-update-${{ github.run_id }}"
        base: main
        add-paths: |
          website/docs/connect-data/reference/
          scripts/processed_files.txt
          scripts/last_commit_sha.txt
        body: |
          This PR adds or updates integration reference documentation for **${{ env.file_count }}** integrations.
          
          Generated from files changed since commit ${{ env.last_commit || 'initial' }} in the [integration-resources repository](https://github.com/appsmithorg/integration-resources/tree/main/Generic%20UQI%20Creation/uqi_configs ).
