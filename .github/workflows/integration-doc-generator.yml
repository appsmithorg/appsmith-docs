name: Generate Integration Documentation

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch to merge PR'
        required: false
        default: 'main'

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout docs repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          ref: ${{ github.event.inputs.target_branch }}

      - name: Checkout integration resources
        uses: actions/checkout@v4
        with:
          repository: appsmithorg/integration-resources
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          ref: main
          path: integration-resources

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Setup directories
        run: |
          mkdir -p website/docs/connect-data/reference
          mkdir -p scripts

      - name: Identify changed UQI config files
        run: |
          echo "Searching for updated UQI config files..."
          cd integration-resources
          git checkout main
          git pull
          find "Generic UQI Creation/uqi_configs" -type f -name "*_uqi_config.json" > ../all_uqi_configs.txt
          > changed_files.txt
          while IFS= read -r file; do
            last_commit=$(git log -1 --format="%ct" -- "$file")
            seven_days_ago=$(date -d "7 days ago" +%s)
            if [ "$last_commit" -ge "$seven_days_ago" ]; then
              echo "$file" >> ../changed_files.txt
            fi
          done < ../all_uqi_configs.txt

      - name: Process changed files
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ ! -s changed_files.txt ]; then
            echo "No changed UQI config files in the last 7 days. Exiting."
            exit 0
          fi
          while IFS= read -r file; do
            echo "Processing file: $file"
            # Encode file path for URL
            encoded_path=$(echo "$file" | sed 's/ /%20/g')
            raw_url="https://raw.githubusercontent.com/appsmithorg/integration-resources/main/$encoded_path"
            echo "Fetching raw content from $raw_url"
            content=$(curl -sSL -H "Authorization: token ${{ secrets.REPO_ACCESS_TOKEN }}" "$raw_url")
            if [ -z "$content" ]; then
              echo "Error: Could not fetch content for $file" >&2
              continue
            fi

            # Derive integration name and output file path
            base_name=$(basename "$file" "_uqi_config.json")
            integration=$(echo "$base_name" | tr '[:upper:]' '[:lower:]')
            doc_path="website/docs/connect-data/reference/${integration}.md"

            # Step 1: Extract integration details via GPT
            extract_prompt=$(< .github/prompts/extract_prompt.txt)
            payload1=$(jq -n \
              --arg system "$extract_prompt" \
              --arg user "$content" \
              '{model: "gpt-4", messages: [{role:"system", content:$system}, {role:"user", content:$user}]}')
            response1=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d "$payload1")
            if echo "$response1" | jq -e '.error' > /dev/null; then
              err=$(echo "$response1" | jq -r '.error.message')
              echo "OpenAI API error on extract for $file: $err" >&2
              continue
            fi
            extracted=$(echo "$response1" | jq -r '.choices[0].message.content')

            # Step 2: Generate documentation via GPT
            gen_prompt=$(< .github/prompts/generate_prompt.txt)
            payload2=$(jq -n \
              --arg system "$gen_prompt" \
              --arg user "$extracted" \
              '{model: "gpt-4", messages: [{role:"system", content:$system}, {role:"user", content:$user}]}')
            response2=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d "$payload2")
            if echo "$response2" | jq -e '.error' > /dev/null; then
              err=$(echo "$response2" | jq -r '.error.message')
              echo "OpenAI API error on generate for $file: $err" >&2
              continue
            fi
            doc_content=$(echo "$response2" | jq -r '.choices[0].message.content')

            # Write markdown to file
            echo "$doc_content" > "$doc_path"
            echo "Generated documentation for $integration"

            # Track processed file
            echo "$file" >> scripts/processed_files.txt
            echo "$integration" >> new_integrations.txt
          done < changed_files.txt
          if [ ! -s new_integrations.txt ]; then
            echo "No new integrations documentation generated. Exiting."
            exit 0
          fi

      - name: Prepare PR body
        run: |
          echo "This PR updates documentation for the following integrations:" > pr_body.txt
          while IFS= read -r integration; do
            echo "- $integration" >> pr_body.txt
          done < new_integrations.txt

      - name: Commit and create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          base: ${{ github.event.inputs.target_branch }}
          title: "Update integration documentation"
          body-path: pr_body.txt
