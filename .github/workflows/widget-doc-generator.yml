name: Widget Doc Generator

on:
  schedule:
    - cron: '0 3 * * 1' # Weekly on Monday at 03:00 UTC
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to create PR against'
        required: false
        default: 'docs-staging'

env:
  TARGET_BRANCH: ${{ github.event.inputs.target_branch || 'docs-staging' }}

jobs:
  generate_latest_widget_doc:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout appsmith-docs (target)
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN_WIDGETS }}
        ref: ${{ env.TARGET_BRANCH }}
        fetch-depth: 0
        persist-credentials: false

    - name: Checkout appsmith repo
      uses: actions/checkout@v4
      with:
        repository: appsmithorg/appsmith
        token: ${{ secrets.REPO_ACCESS_TOKEN_WIDGETS }}
        ref: release
        path: appsmith
        fetch-depth: 10  # enough to get recent commit

    - name: Get most recently committed index.tsx file
      id: latest-widget
      run: |
        cd appsmith/app/client/src/widgets
        LAST_FILE=$(git log -1 --pretty=format: --name-only | grep '/widget/index.tsx$' | head -n 1)
        
        if [ -z "$LAST_FILE" ]; then
          echo "No recent widget/index.tsx found. Exiting."
          exit 0
        fi

        echo "Found: $LAST_FILE"
        echo "widget_file_path=appsmith/app/client/src/widgets/$LAST_FILE" >> $GITHUB_OUTPUT
        echo "changes_found=true" >> $GITHUB_ENV

    - name: Generate widget doc with OpenAI
      if: env.changes_found == 'true'
      run: |
        mkdir -p website/docs/widgets
        FILE_PATH="${{ steps.latest-widget.outputs.widget_file_path }}"
        FILE_NAME=$(basename "$FILE_PATH")
        WIDGET_NAME=$(basename "$(dirname "$(dirname "$FILE_PATH")")")

        cp "$FILE_PATH" widget_input.tsx

        SYSTEM_PROMPT=$(cat .github/prompts/extract_prompt_widget.txt || echo "Extract widget info for docs.")
        USER_CONTENT=$(cat widget_input.tsx)

        # Prompt 1
        PAYLOAD1=$(jq -n \
          --arg system "$SYSTEM_PROMPT" \
          --arg user "$USER_CONTENT" \
          '{
            model: "gpt-4-1106-preview",
            messages: [
              {"role": "system", "content": $system},
              {"role": "user", "content": $user}
            ],
            max_tokens: 2000,
            temperature: 0
          }')

        RESPONSE1=$(curl -s https://api.openai.com/v1/chat/completions \
          -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d "$PAYLOAD1")

        echo "$RESPONSE1" | jq -r '.choices[0].message.content' > extracted_widget_info.md

        # Prompt 2
        SYSTEM_PROMPT2=$(cat .github/prompts/generate_prompt_widget.txt || echo "Convert extracted info to markdown.")
        EXTRACTED_CONTENT=$(cat extracted_widget_info.md)

        PAYLOAD2=$(jq -n \
          --arg system "$SYSTEM_PROMPT2" \
          --arg user "$EXTRACTED_CONTENT" \
          '{
            model: "gpt-4-1106-preview",
            messages: [
              {"role": "system", "content": $system},
              {"role": "user", "content": $user}
            ],
            max_tokens: 4000,
            temperature: 0.3
          }')

        RESPONSE2=$(curl -s https://api.openai.com/v1/chat/completions \
          -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d "$PAYLOAD2")

        echo "$RESPONSE2" | jq -r '.choices[0].message.content' > generated_widget_doc.md

        cp generated_widget_doc.md "website/docs/widgets/${WIDGET_NAME}.md"
        echo "$FILE_PATH" > scripts/processed_widgets.txt

        echo "content_generated=true" >> $GITHUB_ENV

    - name: Create PR
      if: env.content_generated == 'true'
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN_WIDGETS }}
        title: "docs: auto-gen widget doc for ${{ env.TARGET_BRANCH }}"
        commit-message: "docs: auto-generated docs for updated widget"
        branch: "widget-doc-update/${{ github.run_id }}"
        base: ${{ env.TARGET_BRANCH }}
        add-paths: |
          website/docs/widgets/
          scripts/processed_widgets.txt
        body: |
          ðŸ“¦ Widget doc updated for latest committed widget in `release` branch.

          - Source: `appsmithorg/appsmith`
          - Widget file: `$(cat scripts/processed_widgets.txt)`
