 name: Widget Doc Generator

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch in appsmith-docs to create PR against'
        required: true
        default: 'docs-staging'
        type: string

jobs:
  generate_widget_docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout appsmith-docs (target branch)
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.test_REPO_ACCESS_TOKEN }}
        ref: ${{ github.event.inputs.target_branch }}
        fetch-depth: 0

    - name: Checkout appsmith repo (release branch)
      uses: actions/checkout@v4
      with:
        repository: appsmithorg/appsmith
        token: ${{ secrets.test_REPO_ACCESS_TOKEN }}
        ref: release
        path: appsmith
        fetch-depth: 2

    - name: Get changed widget files
      id: changed-files
      uses: tj-actions/changed-files@v46
      with:
        path: appsmith/app/client/src/widgets
        since_last_remote_commit: true

    - name: Save list of changed files
      run: |
        mkdir -p scripts
        echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' > widget_files_to_process.txt
        if [ ! -s widget_files_to_process.txt ]; then
          echo "No new or modified widget files to process. Exiting."
          exit 0
        fi
        echo "changes_found=true" >> $GITHUB_ENV

    - name: Process widget files with OpenAI
      if: env.changes_found == 'true'
      run: |
        mkdir -p generated_widget_docs
        PROCESSED_COUNT=0

        while IFS= read -r FILE_PATH; do
          FILE_NAME=$(basename "$FILE_PATH")
          WIDGET_NAME=$(basename "$(dirname "$FILE_PATH")")
          echo "⏳ Processing $FILE_NAME for widget $WIDGET_NAME"

          cp "$FILE_PATH" input_widget_file.js

          SYSTEM_PROMPT=$(cat .github/prompts/extract_prompt.txt || echo "Extract key widget properties and usage.")
          USER_CONTENT=$(cat input_widget_file.js)

          PAYLOAD=$(jq -n \
            --arg system "$SYSTEM_PROMPT" \
            --arg user "$USER_CONTENT" \
            '{
              model: "gpt-4-1106-preview",
              messages: [
                {"role": "system", "content": $system},
                {"role": "user", "content": $user}
              ],
              max_tokens: 2000,
              temperature: 0
            }')

          RESPONSE1=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")

          if echo "$RESPONSE1" | jq -e '.error' > /dev/null; then
            echo "❌ OpenAI error on Prompt 1"
            echo "$RESPONSE1" | jq .
            continue
          fi
          echo "$RESPONSE1" | jq -r '.choices[0].message.content' > extracted_widget_info.md

          SYSTEM_PROMPT=$(cat .github/prompts/generate_prompt.txt || echo "Generate widget documentation in markdown.")
          EXTRACTED_CONTENT=$(cat extracted_widget_info.md)

          PAYLOAD=$(jq -n \
            --arg system "$SYSTEM_PROMPT" \
            --arg user "$EXTRACTED_CONTENT" \
            '{
              model: "gpt-4-1106-preview",
              messages: [
                {"role": "system", "content": $system},
                {"role": "user", "content": $user}
              ],
              max_tokens: 4000,
              temperature: 0.3
            }')

          RESPONSE2=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")

          if echo "$RESPONSE2" | jq -e '.error' > /dev/null; then
            echo "❌ OpenAI error on Prompt 2"
            echo "$RESPONSE2" | jq .
            continue
          fi
          echo "$RESPONSE2" | jq -r '.choices[0].message.content' > generated_widget_doc.md

          FINAL_PATH="website/docs/widgets/${WIDGET_NAME}.md"
          mkdir -p "$(dirname "$FINAL_PATH")"
          cp generated_widget_doc.md "$FINAL_PATH"

          echo "$FILE_NAME" >> scripts/processed_widgets.txt
          PROCESSED_COUNT=$((PROCESSED_COUNT + 1))
          echo "✅ Finished $FILE_NAME"

        done < widget_files_to_process.txt

        echo "processed_count=$PROCESSED_COUNT" >> $GITHUB_ENV
        if [ "$PROCESSED_COUNT" -gt 0 ]; then
          echo "content_generated=true" >> $GITHUB_ENV
        else
          echo "content_generated=false" >> $GITHUB_ENV
        fi
        rm -f input_widget_file.js extracted_widget_info.md generated_widget_doc.md

    - name: Commit and open PR
      if: env.content_generated == 'true'
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.test_REPO_ACCESS_TOKEN }}
        title: "docs: update widget docs for ${{ github.event.inputs.target_branch }}"
        commit-message: "docs: automated widget documentation\n\nProcessed changed widget files from appsmith repo."
        branch: "widgets-update/${{ github.event.inputs.target_branch }}-${{ github.run_id }}"
        base: ${{ github.event.inputs.target_branch }}
        add-paths: |
          website/docs/widgets/
          scripts/processed_widgets.txt
        body: |
          ✅ Auto-generated PR based on widget file changes from `appsmithorg/appsmith`.

          **Target Branch:** `${{ github.event.inputs.target_branch }}`  
          **Source:** `release` branch of Appsmith repo

          This PR includes:
          - Updated docs for changed widget files.
          - Processed list in `scripts/processed_widgets.txt`.
